{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "LLVM-IR",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#basic-blocks"
    },
    {
      "include": "#instructions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#types"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#metadata"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "comment": "basic keywords",
          "name": "entity.name.function",
          "match": "\\b(?<![%\\.])(attributes|declare|exact|extractelement|extractvalue|inbounds|insertelement|insertvalue|one|ord|shufflevector|trunc|type|unwind)\\b"
        },
        {
          "comment": "global variable keywords",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(constant|global)\\b"
        },
        {
          "name": "keyword.type.function.llvm",
          "match": "\\b(?<![%\\.])(define)\\b"
        },
        {
          "name": "constant.language.llvm",
          "match": "\\b(?<![%\\.])(eq|ne|ugt|uge|ult|ule|sgt|sge|slt|sle|nuw|nsw)\\b"
        },
        {
          "name": "keyword.operator.assignment.llvm",
          "match": "="
        },
        {
          "name": "keyword.operator.to.llvm",
          "match": "\\b(to)\\b"
        },
        {
          "name": "keyword.other.llvm",
          "match": "\\b(dso_preemptable|dso_local)\\b"
        },
        {
          "name": "keyword.other.llvm",
          "match": "\\b((unnamed_addr|local_unnamed_addr))\\b"
        },
        {
          "name": "keyword.other.llvm",
          "comment": "Linkage types",
          "match": "\\b(?<![%\\.])(private|internal|available_externally|linkonce|weak|common|appending|extern_weak|linkonce_odr|weak_odr|external)\\b"
        }
      ]
    },
    "basic-blocks": {
      "patterns": [
        {
          "comment": "block labels",
          "match": "([a-zA-Z0-9\\-\\$\\._]*)(\\:)",
          "captures": {
            "1": {
              "name": "constant.language.symbol.llvm"
            },
            "2": {
              "name": "punctuation.separator.colon.llvm"
            }
          }
        },
        {
          "comment": "label operand",
          "match": "\\b(?<![%\\.])(label)(\\s*)([@%][a-zA-Z0-9\\-\\$\\._]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.label.llvm"
            },
            "3": {
              "name": "constant.language.symbol.llvm"
            }
          }
        }
      ]
    },
    "instructions": {
      "patterns": [
        {
          "comment": "terminator instructions",
          "name": "keyword.control.terminator.llvm",
          "match": "\\b(?<![%\\.])(ret|br|switch|indirectbr|invoke|resume|unreachable|cleanupret|catchret|catchpad|catchswitch|callbr)\\b"
        },
        {
          "comment": "standard unary operators",
          "name": "entity.name.function.llvm",
          "match": "\\b(?<![%\\.])(fneg)\\b"
        },
        {
          "comment": "standard binary operators",
          "name": "entity.name.function.llvm",
          "match": "\\b(?<![%\\.])(add|fadd|sub|fsub|mul|fmul|udiv|sdiv|fdiv|urem|srem|frem)\\b"
        },
        {
          "comment": "logical operators",
          "name": "entity.name.function.llvm",
          "match": "\\b(?<![%\\.])(and|or|xor)\\b"
        },
        {
          "comment": "memory instructions",
          "name": "entity.name.function.llvm",
          "match": "\\b(?<![%\\.])(alloca|load|store|cmpxchg|atomicrmw|fence|getelementptr)\\b"
        },
        {
          "comment": "conversion instructions",
          "name": "entity.name.function.llvm",
          "match": "\\b(?<![%\\.])(trunc|zext|sext|fptrunc|fpext|fptoui|fptosi|uitofp|sitofp|inttoptr|ptrtoint|bitcast|addrspacecast)\\b"
        },
        {
          "comment": "other instructions",
          "name": "entity.name.function.llvm",
          "match": "\\b(?<![%\\.])(icmp|fcmp|phi|select|shl|lshr|ashr|va_arg|extractelement|insertelement|shufflevector|extractvalue|insertvalue|landingpad|cleanuppad|freeze)\\b"
        },
        {
          "comment": "call instruction",
          "match": "\\b(?<![%\\.])(((tail|musttail|notail)\\s+)?call)\\b",
          "name": "entity.name.function.llvm"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.llvm",
          "comment": "Quoted variable names",
          "match": "([@#%])(\")([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)(\")"
        },
        {
          "name": "variable.other.llvm",
          "comment": "Unquoted variables names",
          "match": "[@#%][a-zA-Z0-9\\-\\$\\._]*"
        },
        {
          "name": "variable.language.llvm",
          "match": "\\b(source_filename)\\b"
        },
        {
          "name": "variable.language.llvm",
          "match": "\\b(target)\\s*(triple|datalayout)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.llvm",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.llvm",
          "match": "\\\\."
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "comment": "basic types",
          "name": "entity.name.type.llvm",
          "match": "\\b(?<![%\\.])(void|ptr)\\b"
        },
        {
          "comment": "integer type",
          "name": "entity.name.type.integer.llvm",
          "match": "\\b(?<![%\\.])(i[1-9][0-9]*)\\b"
        },
        {
          "comment": "floating-point types",
          "name": "entity.name.type.float.llvm",
          "match": "\\b(?<![%\\.])(half|bfloat|float|double|fp128|x86_fp80|ppc_fp128)"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "comment": "basic constants",
          "name": "constant.language.llvm",
          "match": "\\b(?<![!#%\\.])(true|false|null|none|zeroinitializer|poison|undef)\\b"
        },
        {
          "comment": "integer constants",
          "name": "constant.language.integer.llvm",
          "match": "\\b(?<![!#%\\.])(\\d+)(?!\\.)\\b"
        },
        {
          "comment": "float constants",
          "name": "constant.language.float.llvm",
          "match": "\\b(?<![!#%\\.])(\\d+)\\.(\\d+)\\b"
        },
        {
          "comment": "hex constants",
          "name": "constant.language.hex.llvm",
          "match": "\\b(?<![!#%\\.])(0(x|X)[0-9a-fA-F]+)\\b"
        },
        {
          "comment": "exp constants",
          "name": "constant.language.hex.llvm",
          "match": "\\b(?<![!#%\\.])(\\d+)\\.(\\d+)e\\+(\\d+)\\b"
        }
      ]
    },
    "attributes": {
      "patterns": [
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(zeroext|signext|inreg|byval|byref|preallocated|inalloca|sret)\\b"
        },
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(elementtype|align|noalias|nocapture|nofree|nest|returned)\\b"
        },
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(nonnull|dereferenceable|dereferenceable_or_null)\\b"
        },
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(swiftself|swiftasync|swifterror)\\b"
        },
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(immarg|noundef|nofpclass)\\b"
        },
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(alignstack|allocalign|allocptr)\\b"
        },
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(readnone|readonly|writeonly|writable)\\b"
        },
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(initializes|dead_on_unwind|range)\\b"
        },
        {
          "comment": "parameter attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(volatile)\\b"
        },
        {
          "comment": "general function attributes",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(alwaysinline|builtin|cold|convergent|disable_sanitizer_instrumentation|fn_ret_thunk_extern|hot|inlinehint|jumptable|minsize|naked|no-jump-tables|nobuiltin|nocallback|nodivergencesource|noduplicate|nofree|noimplicitfloat|noinline|nomerge|nonlazybind|noprofile|skipprofile|noredzone|indirect-tls-seg-refs|noreturn|norecurse|willreturn|nosync|nounwind|nosanitize_bounds|nosanitize_coverage|null_pointer_is_valid|optdebug|optforfuzzing|optnone|optsize|returns_twice|safestack|sanitize_address|sanitize_memory|sanitize_thread|sanitize_hwaddress|sanitize_memtag|sanitize_realtime|sanitize_realtime_blocking|speculative_load_hardening|speculatable|ssp|sspstrong|sspreq|strictfp|nocf_check|shadowcallstack|mustprogress)\\b"
        },
        {
          "comment": "function attributes with arguments",
          "name": "keyword.other.llvm",
          "match": "\\b(?<![%\\.])(alignstack|allockind|allocsize|memory|uwtable|vscale_range)\\b"
        }
      ]
    },
    "comments": {
      "name": "comment.line",
      "match": ";.*$"
    },
    "metadata": {
      "patterns": [
        {
          "comment": "metadata references with dot notation",
          "name": "entity.name.tag.metadata.llvm",
          "match": "!([a-zA-Z][a-zA-Z0-9]*)(\\.[a-zA-Z0-9]+)*"
        },
        {
          "comment": "metadata identifiers",
          "name": "entity.name.tag.metadata.llvm",
          "match": "!(\\d+|\\{|\\}|\\[|\\])"
        }
      ]
    }
  },
  "scopeName": "source.ll"
}